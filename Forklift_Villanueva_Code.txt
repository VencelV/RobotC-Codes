#pragma config(Sensor, dgtl2,  bump,           sensorTouch)
#pragma config(Motor,  port2,           rightmotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           leftmotor,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           servo2,        tmotorServoStandard, openLoop)
#pragma config(Motor,  port9,           servo,         tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Project Title: Machine Project
Team Members: Faiz, Diego, Joy, Vencel, Riley, Matthew
Date: 12-8-2021
Section:


Task Description: Design a robotic system that can translate to three different locations, a starting/ending point, a pickup
point, and a drop off point. The starting and ending point must be the same location. None of the three
locations can be within a foot of each other. The robotic system must be fully automated and operate after
a switch is pressed. After operation is started, the robotic system must pickup three ping pong balls from the
pickup point and transport them to the drop off point, while carrying one ball at a time. After the three balls
have been placed at the drop off point, the robotic system must return to the starting/ending point.

Pseudocode:

*/

task main()
{
setServo(servo, -30);
untilBump(bump);
int distan = 2;
int sum = 0;
int endt = 0;


	sum = distan;
		setServo(servo,100);
		startMotor(leftmotor,30);
		startMotor(rightmotor,30);
		wait(sum);
		stopMotor(leftmotor);
		stopMotor(rightmotor);
		setServo(servo, -30);

		wait(0.5);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,-50);
		wait(sum);
		stopMotor(rightmotor);
		stopMotor(leftmotor);

		startMotor(rightmotor,-50);
		startMotor(leftmotor,50);
		wait(2.1);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(0.2);
		startMotor(rightmotor,-50);
		startMotor(leftmotor,-50);
		wait(0.2);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(2);
		setServo(servo, 100);
		wait(1);
		setServo(servo,-30);
		wait(0.75);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,-50);
		wait(0.5);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(0.5);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,50);
		wait(1.95);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(1);
		startMotor(rightmotor,50);
		startMotor(leftmotor,50);
		wait(1);
		sum = distan + 1;
		endt = endt + 1;



	while(endt < 2)
	{
		sum = distan;

		startMotor(leftmotor,30);
		startMotor(rightmotor,30);
		wait(sum);
		stopMotor(leftmotor);
		stopMotor(rightmotor);
		wait(2);
		setServo(servo,100);
		wait(0.5);
		setServo(servo, -30);

		wait(0.5);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,-50);
		wait(sum);
		stopMotor(rightmotor);
		stopMotor(leftmotor);

		startMotor(rightmotor,-50);
		startMotor(leftmotor,50);
		wait(1.95);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(0.2);
		startMotor(rightmotor,-50);
		startMotor(leftmotor,-50);
		wait(0.2);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(2);
		setServo(servo, 100);
		wait(1);
		setServo(servo,-30);
		wait(0.75);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,-50);
		wait(0.2);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(0.5);
		startMotor(leftmotor, -50);
		startMotor(rightmotor,50);
		wait(1.95);
		stopMotor(rightmotor);
		stopMotor(leftmotor);
		wait(1);
		startMotor(rightmotor,50);
		startMotor(leftmotor,50);
		wait(1);
		sum = distan + 1.5;
		endt = endt + 1;
	}
	wait(1);
setServo(100);
wait(1);
startMotor(leftmotor,-25);
startMotor(rightmotor,-25);
wait(3);
stopMotor(leftmotor);
stopMotor(rightmotor);




}
