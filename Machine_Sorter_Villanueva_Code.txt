#pragma config(Sensor, in4,    line,           sensorLineFollower)
#pragma config(Sensor, dgtl2,  quad,           sensorQuadEncoder)
#pragma config(Motor,  port1,           flah,          tmotorVexFlashlight, openLoop, reversed)
#pragma config(Motor,  port2,           lmotor,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           rrmotor,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           flash,         tmotorVexFlashlight, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Project Title: Machine Sorter Code
Team Members: Vencel, Riley, TJ
Date: May 20 2022
Section:


Task Description:You must create a fully automated system to seperate 3-4 different materials (1/2" spheres) into seperate bins. The sorter must be able to hold at least 5 samples in queue, and sort 15 samples in less than 2 minutes. You can use physical properties (size and weight) to sort only one of the materials and sensors must to the rest.


Pseudocode:

*/

task main()//Program begins, insert code within curly braces
{
	/*startMotor(lmotor,-20);
	wait(0.60);
	stopMotor(lmotor);
	wait(1);*/

	while(1==1) //loop for the top motor
	{

		if(SensorValue(line)>=2800 && SensorValue(line)<=2890 ) //clear
		{
			startMotor(rrmotor, -25);
			untilEncoderCounts(0,quad);
			stopMotor(rrmotor);
			wait(0.5);
			startMotor(lmotor,-20);
			wait(0.64);
			stopMotor(lmotor);
			wait(1);
			startMotor(rrmotor, 25);
			untilEncoderCounts(0,quad);
			stopMotor(rrmotor);

		}
		wait(1);
		if(SensorValue(line)>=2600 && SensorValue(line)<=2800)//wood
		{
			startMotor(rrmotor, -25);
			untilEncoderCounts(870, quad);
			stopMotor(rrmotor);
			wait(0.5);
			startMotor(lmotor,-20);
			wait(0.64);
			stopMotor(lmotor);
			wait(1);
			startMotor(rrmotor, 25);
			untilEncoderCounts(-870, quad);
			stopMotor(rrmotor);
		}
		wait(1);
		if(SensorValue(line)>=2900 && SensorValue(line)<=3000)   //metal
		{
			startMotor(rrmotor, -25);
			untilEncoderCounts(1600, quad);
			stopMotor(rrmotor);
			wait(0.5);
			startMotor(lmotor,-20);
			wait(0.64);
			stopMotor(lmotor);
			wait(1);
			startMotor(rrmotor, 25);
			untilEncoderCounts(-1600, quad);
			stopMotor(rrmotor);
		}

}


}
